#labels Quickstart,Maven,Archetype,JacpFX
#install and usage tutorial for JacpFX.

* This Tutorial will give you a short introduction how to start development with JacpFX *

= Prerequirements =
  * {{{OS: windows >= xp, OSX (lion), any Linux}}}
  * {{{Java 7 update >6}}} 
  * maven installed
  * set JAVA_HOME, M2_HOME


if you want to create native executables yo need:

  * on windows: http://www.jrsoftware.org/isdl.php to generate exe; http://wix.sourceforge.net/ to generate msi
  * on osx (xcode? it is always installed? at least for me ;-) )
  * on linux "rpmbuild" for rpm´s... on debain he simply creates the deb´s

= Create a (quickstart) project from archetype =
{{{mvn archetype:generate  -DarchetypeGroupId=org.jacp  -DarchetypeArtifactId=JacpFX-quickstart-archetype  -DarchetypeVersion=1.1  -DarchetypeRepository=http://developer.ahcp.de/nexus/content/repositories/jacp}}}

Add a groupId (like com.my.company), an artifactId (which will be the project name  ... {{{MyFirstJacpFXProject}}}) and press enter for the rest (or change version number and package name ).

 
= JacpFX development =
  * The quickstart-archetype genaretes an example project including two *perspectives {{{(pure JavaFX and FXML)}}}*, two (pure) *{{{JavaFX}}} components*, two *{{{FXML}}} components*, a stateful- and a stateless-component and one simple spring bean. It includes all ressources and configurations to start real life project from scratch. the resource folder contains following folders:

 * bundles : contains the message.properties
 * fxml: contains the fxml files
 * images: all application images
 * css: all style sheets

The pom.xml includes all Ant-Tasks from Oracle to create native executables, create binary css, executeable jar´s and jnlp files. For web deployment you should uncomment the jar signing and add you keys there. 

== build the project ==