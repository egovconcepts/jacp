#labels Documentation,JavaFX2,Jacp
#JACP JavaFX 2 Documentation page

= JACP JavaFX 2 documentation =

The JACP JavaFX Project is an API to create Rich Clients in MVC style with JavaFX 2. It provides a simple API to create a workspace, perspectives, components and to compose your Client application easily.  All components behave like controllers and triggered by messages similar to Spring MVC controllers. Components have a defined life cycle, their handle() methods is always executed in a separate thread, so the developer do not to have to manage own threading mechanism or be afraid of locking and unresponsive UI. The API uses dependency injection to initialize all parts of your client; the currently used DI implementation is Spring. It is possible to inject “normal” spring beans to your component and to use the complete Spring stack in your JACP Application.


= The Application Launcher =

The “Application Launcher” is the entry point where you define the spring xml and where the complete stack of spring, JavaFX 2 and JACP  is started. It defines a main method so you have to declare your xml in the launchers constructor and can start the project.  The structure of a JACP/Spring application looks like this:
<img src="http://jacp.googlecode.com/svn/wiki/JACP_Overview.png"/>

{{{
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">


	<bean id="workbench" class="org.jacp.javafx2.rcp.workbench.Workbench">
		<property name="perspectives">
			<list>
				<ref bean="perspectiveOne" />
			</list>
		</property>
	</bean>

	<bean id="perspectiveOne" class="org.jacp.javafx2.rcp.perspectives.PerspectiveOne">
		<property name="name" value="perspectiveOne" />
		<property name="id" value="id01" />
		<property name="active" value="true" />
		<property name="subcomponents">
			<list>
				<ref bean="demoFX2ComponentOne" />
				<ref bean="demoFX2ComponentTwo" />
			</list>
		</property>
	</bean>

	<bean id="demoFX2ComponentOne" class="org.jacp.javafx2.rcp.components.DemoFX2ComponentOne">
		<property name="name" value="demoFX2ComponentOne" />
		<property name="active" value="true" />
		<property name="id" value="id001" />
		<property name="executionTarget" value="P0" />
	</bean>
	<bean id="demoFX2ComponentTwo" class="org.jacp.javafx2.rcp.components.DemoFX2ComponentTwo">
		<property name="name" value="demoFX2ComponentTwo" />
		<property name="active" value="false" />
		<property name="id" value="id002" />
		<property name="executionTarget" value="P1" />
	</bean>

</beans>
}}}

=The Workbench=
The workbench is the root node of your client project, providing simple interfaces to configure the basic behaviour of your client. It consists of two methods you have to implement, the *{{{handleInitialLayout(IAction<Event, Object> action, IWorkbenchLayout<Node> layout,Stage stage)}}}* and *{{{postHandle(FX2ComponentLayout layout)}}}*. The action will always contain the default initialization message “init”, this message is default for all components on application start up. The Stage reference will give you the reference to the JavaFX Stage, here you can place some custom settings for your application. The  *{{{IWorkbenchLayout<Node> layout}}}* reference is your entry to configure following thinks on your application:
 * *{{{WorkbenchXYSize(x,y):}}}* defines the initial workbench size
 * *{{{MenuEnabled(boolean):}}}* enable main menu if needed, the entries are defined later; here you only declare if a menu is activated
 * *{{{Style(StageStyle):}}}* here you define the default {{{StageStyle}}} (decorated/undecorated)
 * *{{{registerToolBar(ToolbarPosition):}}}* enable tool bars in NORTH,SOUTH, EAST, WEST; those registered toolbars are accessible in all perspective and components, but you are free to define custom toolbars in your component which are not accessible for all others.